name: 'Git Tag Update'
run-name: 'PR Closure #${{ github.event.pull_request.number }}'

on:
  pull_request:
    types: [closed]
    branches:
    - main

permissions:
  id-token: write
  contents: write
  pull-requests: read

jobs:
  GetChangedElements:
    name: 'Get Changed Elements'
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && !startsWith(github.event.pull_request.head.ref, 'release/')
    outputs:
      elementsChanged: ${{ steps.elements-changed-output.outputs.elementsChanged }}
      lastCommitSha: ${{ steps.get-last-commit.outputs.lastCommitSha }}
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ github.token }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Output elements to run CI for
      id: elements-changed-output
      uses: ./.github/actions/get-changed-elements
      with:
        changed-files-config: 'changed-files-config.json'

    - name: Get last commit SHA of closed PR
      id: get-last-commit
      shell: pwsh
      run: |
        # Fetch the list of commits in the PR
        $lastCommitSha = gh pr view $PR_NUMBER --json commits -q '.commits[].oid'
        Write-Host "Last commit SHA: $lastCommitSha"
        "lastCommitSha=$lastCommitSha" >> $env:GITHUB_OUTPUT

    - name: 'Create head branch of PR'
      shell: pwsh
      run: |
        git fetch --all
        Write-Host "Local branches:"
        git branch --list
        Write-Host "Remote branches:"
        git branch --list -r
        if ($null -eq (git branch --list -r origin/${{ github.event.pull_request.head.ref }})) {
          Write-Host "Re-creating branch ${{ github.event.pull_request.head.ref }}..."
          gh api repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs -X POST -F ref=refs/heads/${{ github.event.pull_request.head.ref }} -F sha=${{ steps.get-last-commit.outputs.lastCommitSha }}
          git fetch
          Write-Host "Remote branches:"
          git branch --list -r
        }
        else {
          Write-Host "Branch ${{ github.event.pull_request.head.ref }} already exists."
        }


  PushNewTags:
    name: 'Push New Tag For ${{ matrix.element }}'
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && needs.GetChangedElements.outputs.elementsChanged
    needs: GetChangedElements
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        element: ${{fromJson(needs.GetChangedElements.outputs.elementsChanged)}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}

    - name: 'Install GitVersion'
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
        includePrerelease: 'false'
        preferLatestVersion: 'true'

    - name: GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: 'true'
        additionalArguments: '/overrideconfig tag-prefix=${{ matrix.element }}-v'

    - name: Output to Job Summary
      id: output-element
      shell: pwsh
      run: |
        Write-Host "New Tag: ${{ matrix.element }}-v${{ steps.gitversion.outputs.majorMinorPatch }}"
        Write-Host "Element: ${{ matrix.element }}"
        Write-Host "New version: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        "# :bookmark: New Tag: ${{ matrix.element }}-v${{ steps.gitversion.outputs.majorMinorPatch }} `r`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "## Element: ${{ matrix.element }} `r`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "## New Version: ${{ steps.gitversion.outputs.majorMinorPatch }} `r`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "## Branch: ${{ github.event.pull_request.head.ref }} `r`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

    - name: Push New Git Tag
      shell: 'pwsh'
      run: |
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"
        git tag -f ${{ matrix.element }}-v${{ steps.gitversion.outputs.majorMinorPatch }}
        git push origin -f ${{ matrix.element }}-v${{ steps.gitversion.outputs.majorMinorPatch }}

  CreateRelease:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs: [GetChangedElements, PushNewTags]
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'hotfix/') && (needs.PushNewTags.result == 'success' || needs.PushNewTags.result == 'skipped')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Create release branch
      shell: pwsh
      run: |
        $currentCommit = git rev-parse HEAD
        $parentCommits = git log --pretty=%P $currentCommit
        $parentReleases = $parentCommits | Where-Object { if ($_) {( git branch --points-at $_.Split()[0]) -match 'release/'} }
        $latestRelease = ((git branch --points $parentReleases[3]).Trim().Split().Trim("release/v") | Sort-Object -Descending)[0]
        $major,$minor,$patch = $latestRelease.Split('.')
        $patch = [int]$patch + 1
        $newRelease = "release/v$major.$minor.$patch"
        git checkout -b $newRelease
        git push origin $newRelease

  RemovePrBranch:
    name: 'Remove PR Branch'
    runs-on: ubuntu-latest
    needs: [GetChangedElements, PushNewTags, CreateRelease]
    if: always() && needs.GetChangedElements.result == 'success'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Remove PR branch
      shell: pwsh
      run: |
        git push origin --delete ${{ github.event.pull_request.head.ref }}  
